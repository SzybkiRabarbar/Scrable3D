// Code generated by MockGen. DO NOT EDIT.
// Source: internal/svc/field.go
//
// Generated by this command:
//
//	mockgen -source=internal/svc/field.go -destination=internal/mock/mock_svc_field.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	dto "scrable3/internal/dto"
	model "scrable3/internal/model"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockFieldService is a mock of FieldService interface.
type MockFieldService struct {
	ctrl     *gomock.Controller
	recorder *MockFieldServiceMockRecorder
	isgomock struct{}
}

// MockFieldServiceMockRecorder is the mock recorder for MockFieldService.
type MockFieldServiceMockRecorder struct {
	mock *MockFieldService
}

// NewMockFieldService creates a new mock instance.
func NewMockFieldService(ctrl *gomock.Controller) *MockFieldService {
	mock := &MockFieldService{ctrl: ctrl}
	mock.recorder = &MockFieldServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFieldService) EXPECT() *MockFieldServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFieldService) Create(gameUUID, playerUUID uuid.UUID, playerAppendNum int, value string, pos [3]int) (*model.Field, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", gameUUID, playerUUID, playerAppendNum, value, pos)
	ret0, _ := ret[0].(*model.Field)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockFieldServiceMockRecorder) Create(gameUUID, playerUUID, playerAppendNum, value, pos any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFieldService)(nil).Create), gameUUID, playerUUID, playerAppendNum, value, pos)
}

// CreateMany mocks base method.
func (m *MockFieldService) CreateMany(gameUUID, playerUUID uuid.UUID, playerAppendNum int, data *[]dto.FieldData) (*[]model.Field, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMany", gameUUID, playerUUID, playerAppendNum, data)
	ret0, _ := ret[0].(*[]model.Field)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMany indicates an expected call of CreateMany.
func (mr *MockFieldServiceMockRecorder) CreateMany(gameUUID, playerUUID, playerAppendNum, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMany", reflect.TypeOf((*MockFieldService)(nil).CreateMany), gameUUID, playerUUID, playerAppendNum, data)
}

// Delete mocks base method.
func (m *MockFieldService) Delete(field *model.Field) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", field)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockFieldServiceMockRecorder) Delete(field any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFieldService)(nil).Delete), field)
}

// GetWithGameUUID mocks base method.
func (m *MockFieldService) GetWithGameUUID(gameUUID uuid.UUID) (*[]model.Field, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithGameUUID", gameUUID)
	ret0, _ := ret[0].(*[]model.Field)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithGameUUID indicates an expected call of GetWithGameUUID.
func (mr *MockFieldServiceMockRecorder) GetWithGameUUID(gameUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithGameUUID", reflect.TypeOf((*MockFieldService)(nil).GetWithGameUUID), gameUUID)
}
