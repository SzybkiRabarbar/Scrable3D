// Code generated by MockGen. DO NOT EDIT.
// Source: internal/svc/avchar.go
//
// Generated by this command:
//
//	mockgen -source=internal/svc/avchar.go -destination=internal/mock/mock_svc_avchar.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	model "scrable3/internal/model"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockAvCharService is a mock of AvCharService interface.
type MockAvCharService struct {
	ctrl     *gomock.Controller
	recorder *MockAvCharServiceMockRecorder
	isgomock struct{}
}

// MockAvCharServiceMockRecorder is the mock recorder for MockAvCharService.
type MockAvCharServiceMockRecorder struct {
	mock *MockAvCharService
}

// NewMockAvCharService creates a new mock instance.
func NewMockAvCharService(ctrl *gomock.Controller) *MockAvCharService {
	mock := &MockAvCharService{ctrl: ctrl}
	mock.recorder = &MockAvCharServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAvCharService) EXPECT() *MockAvCharServiceMockRecorder {
	return m.recorder
}

// CreateMany mocks base method.
func (m *MockAvCharService) CreateMany(player *model.Player, n int) (*[]model.AvChar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMany", player, n)
	ret0, _ := ret[0].(*[]model.AvChar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMany indicates an expected call of CreateMany.
func (mr *MockAvCharServiceMockRecorder) CreateMany(player, n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMany", reflect.TypeOf((*MockAvCharService)(nil).CreateMany), player, n)
}

// DeleteMany mocks base method.
func (m *MockAvCharService) DeleteMany(charsIDs *[]int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMany", charsIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMany indicates an expected call of DeleteMany.
func (mr *MockAvCharServiceMockRecorder) DeleteMany(charsIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMany", reflect.TypeOf((*MockAvCharService)(nil).DeleteMany), charsIDs)
}

// GetWithPlayerUUID mocks base method.
func (m *MockAvCharService) GetWithPlayerUUID(playerUUID uuid.UUID) (*[]model.AvChar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithPlayerUUID", playerUUID)
	ret0, _ := ret[0].(*[]model.AvChar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithPlayerUUID indicates an expected call of GetWithPlayerUUID.
func (mr *MockAvCharServiceMockRecorder) GetWithPlayerUUID(playerUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithPlayerUUID", reflect.TypeOf((*MockAvCharService)(nil).GetWithPlayerUUID), playerUUID)
}
