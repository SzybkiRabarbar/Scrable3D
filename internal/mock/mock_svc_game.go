// Code generated by MockGen. DO NOT EDIT.
// Source: internal/svc/game.go
//
// Generated by this command:
//
//	mockgen -source=internal/svc/game.go -destination=internal/mock/mock_svc_game.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	model "scrable3/internal/model"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockGameService is a mock of GameService interface.
type MockGameService struct {
	ctrl     *gomock.Controller
	recorder *MockGameServiceMockRecorder
	isgomock struct{}
}

// MockGameServiceMockRecorder is the mock recorder for MockGameService.
type MockGameServiceMockRecorder struct {
	mock *MockGameService
}

// NewMockGameService creates a new mock instance.
func NewMockGameService(ctrl *gomock.Controller) *MockGameService {
	mock := &MockGameService{ctrl: ctrl}
	mock.recorder = &MockGameServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGameService) EXPECT() *MockGameServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockGameService) Create() (*model.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create")
	ret0, _ := ret[0].(*model.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockGameServiceMockRecorder) Create() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGameService)(nil).Create))
}

// Delete mocks base method.
func (m *MockGameService) Delete(game *model.Game) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", game)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockGameServiceMockRecorder) Delete(game any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGameService)(nil).Delete), game)
}

// GetWithUUID mocks base method.
func (m *MockGameService) GetWithUUID(gameUUID uuid.UUID) (*model.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithUUID", gameUUID)
	ret0, _ := ret[0].(*model.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithUUID indicates an expected call of GetWithUUID.
func (mr *MockGameServiceMockRecorder) GetWithUUID(gameUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithUUID", reflect.TypeOf((*MockGameService)(nil).GetWithUUID), gameUUID)
}

// Refresh mocks base method.
func (m *MockGameService) Refresh(game *model.Game) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", game)
	ret0, _ := ret[0].(error)
	return ret0
}

// Refresh indicates an expected call of Refresh.
func (mr *MockGameServiceMockRecorder) Refresh(game any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockGameService)(nil).Refresh), game)
}

// Update mocks base method.
func (m *MockGameService) Update(game *model.Game) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", game)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockGameServiceMockRecorder) Update(game any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockGameService)(nil).Update), game)
}
