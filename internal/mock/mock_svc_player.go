// Code generated by MockGen. DO NOT EDIT.
// Source: internal/svc/player.go
//
// Generated by this command:
//
//	mockgen -source=internal/svc/player.go -destination=internal/mock/mock_svc_player.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	model "scrable3/internal/model"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockPlayerService is a mock of PlayerService interface.
type MockPlayerService struct {
	ctrl     *gomock.Controller
	recorder *MockPlayerServiceMockRecorder
	isgomock struct{}
}

// MockPlayerServiceMockRecorder is the mock recorder for MockPlayerService.
type MockPlayerServiceMockRecorder struct {
	mock *MockPlayerService
}

// NewMockPlayerService creates a new mock instance.
func NewMockPlayerService(ctrl *gomock.Controller) *MockPlayerService {
	mock := &MockPlayerService{ctrl: ctrl}
	mock.recorder = &MockPlayerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlayerService) EXPECT() *MockPlayerServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPlayerService) Create(game *model.Game) (*model.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", game)
	ret0, _ := ret[0].(*model.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPlayerServiceMockRecorder) Create(game any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPlayerService)(nil).Create), game)
}

// GetWithUUID mocks base method.
func (m *MockPlayerService) GetWithUUID(playerUUID uuid.UUID) (*model.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithUUID", playerUUID)
	ret0, _ := ret[0].(*model.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithUUID indicates an expected call of GetWithUUID.
func (mr *MockPlayerServiceMockRecorder) GetWithUUID(playerUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithUUID", reflect.TypeOf((*MockPlayerService)(nil).GetWithUUID), playerUUID)
}

// Refresh mocks base method.
func (m *MockPlayerService) Refresh(player *model.Player) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", player)
	ret0, _ := ret[0].(error)
	return ret0
}

// Refresh indicates an expected call of Refresh.
func (mr *MockPlayerServiceMockRecorder) Refresh(player any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockPlayerService)(nil).Refresh), player)
}

// Update mocks base method.
func (m *MockPlayerService) Update(player *model.Player) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", player)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPlayerServiceMockRecorder) Update(player any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPlayerService)(nil).Update), player)
}
