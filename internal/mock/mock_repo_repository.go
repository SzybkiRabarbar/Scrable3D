// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repo/repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/repo/repository.go -destination=internal/mock/mock_repo_repository.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	model "scrable3/internal/model"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CloseConn mocks base method.
func (m *MockRepository) CloseConn() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseConn")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseConn indicates an expected call of CloseConn.
func (mr *MockRepositoryMockRecorder) CloseConn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseConn", reflect.TypeOf((*MockRepository)(nil).CloseConn))
}

// DeleteAvCharByID mocks base method.
func (m *MockRepository) DeleteAvCharByID(avCharID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAvCharByID", avCharID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAvCharByID indicates an expected call of DeleteAvCharByID.
func (mr *MockRepositoryMockRecorder) DeleteAvCharByID(avCharID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAvCharByID", reflect.TypeOf((*MockRepository)(nil).DeleteAvCharByID), avCharID)
}

// DeleteField mocks base method.
func (m *MockRepository) DeleteField(field *model.Field) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteField", field)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteField indicates an expected call of DeleteField.
func (mr *MockRepositoryMockRecorder) DeleteField(field any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteField", reflect.TypeOf((*MockRepository)(nil).DeleteField), field)
}

// DeleteGame mocks base method.
func (m *MockRepository) DeleteGame(game *model.Game) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGame", game)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGame indicates an expected call of DeleteGame.
func (mr *MockRepositoryMockRecorder) DeleteGame(game any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGame", reflect.TypeOf((*MockRepository)(nil).DeleteGame), game)
}

// InsertAvChar mocks base method.
func (m *MockRepository) InsertAvChar(avChar *model.AvChar) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAvChar", avChar)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertAvChar indicates an expected call of InsertAvChar.
func (mr *MockRepositoryMockRecorder) InsertAvChar(avChar any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAvChar", reflect.TypeOf((*MockRepository)(nil).InsertAvChar), avChar)
}

// InsertField mocks base method.
func (m *MockRepository) InsertField(field *model.Field) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertField", field)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertField indicates an expected call of InsertField.
func (mr *MockRepositoryMockRecorder) InsertField(field any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertField", reflect.TypeOf((*MockRepository)(nil).InsertField), field)
}

// InsertGame mocks base method.
func (m *MockRepository) InsertGame(game *model.Game) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertGame", game)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertGame indicates an expected call of InsertGame.
func (mr *MockRepositoryMockRecorder) InsertGame(game any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertGame", reflect.TypeOf((*MockRepository)(nil).InsertGame), game)
}

// InsertPlayer mocks base method.
func (m *MockRepository) InsertPlayer(player *model.Player) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertPlayer", player)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertPlayer indicates an expected call of InsertPlayer.
func (mr *MockRepositoryMockRecorder) InsertPlayer(player any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPlayer", reflect.TypeOf((*MockRepository)(nil).InsertPlayer), player)
}

// Migrate mocks base method.
func (m *MockRepository) Migrate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Migrate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Migrate indicates an expected call of Migrate.
func (mr *MockRepositoryMockRecorder) Migrate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migrate", reflect.TypeOf((*MockRepository)(nil).Migrate))
}

// SelectAvCharsByPlayerID mocks base method.
func (m *MockRepository) SelectAvCharsByPlayerID(playerUUID uuid.UUID) (*[]model.AvChar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAvCharsByPlayerID", playerUUID)
	ret0, _ := ret[0].(*[]model.AvChar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAvCharsByPlayerID indicates an expected call of SelectAvCharsByPlayerID.
func (mr *MockRepositoryMockRecorder) SelectAvCharsByPlayerID(playerUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAvCharsByPlayerID", reflect.TypeOf((*MockRepository)(nil).SelectAvCharsByPlayerID), playerUUID)
}

// SelectFieldsByGameID mocks base method.
func (m *MockRepository) SelectFieldsByGameID(gameUUID uuid.UUID) (*[]model.Field, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectFieldsByGameID", gameUUID)
	ret0, _ := ret[0].(*[]model.Field)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectFieldsByGameID indicates an expected call of SelectFieldsByGameID.
func (mr *MockRepositoryMockRecorder) SelectFieldsByGameID(gameUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFieldsByGameID", reflect.TypeOf((*MockRepository)(nil).SelectFieldsByGameID), gameUUID)
}

// SelectGameByUUID mocks base method.
func (m *MockRepository) SelectGameByUUID(gameUUID uuid.UUID) (*model.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectGameByUUID", gameUUID)
	ret0, _ := ret[0].(*model.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectGameByUUID indicates an expected call of SelectGameByUUID.
func (mr *MockRepositoryMockRecorder) SelectGameByUUID(gameUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectGameByUUID", reflect.TypeOf((*MockRepository)(nil).SelectGameByUUID), gameUUID)
}

// SelectPlayerByUUID mocks base method.
func (m *MockRepository) SelectPlayerByUUID(playerUUID uuid.UUID) (*model.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectPlayerByUUID", playerUUID)
	ret0, _ := ret[0].(*model.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectPlayerByUUID indicates an expected call of SelectPlayerByUUID.
func (mr *MockRepositoryMockRecorder) SelectPlayerByUUID(playerUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectPlayerByUUID", reflect.TypeOf((*MockRepository)(nil).SelectPlayerByUUID), playerUUID)
}

// UpdateGame mocks base method.
func (m *MockRepository) UpdateGame(game *model.Game) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGame", game)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGame indicates an expected call of UpdateGame.
func (mr *MockRepositoryMockRecorder) UpdateGame(game any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGame", reflect.TypeOf((*MockRepository)(nil).UpdateGame), game)
}

// UpdatePlayer mocks base method.
func (m *MockRepository) UpdatePlayer(updatedPlayer *model.Player) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlayer", updatedPlayer)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePlayer indicates an expected call of UpdatePlayer.
func (mr *MockRepositoryMockRecorder) UpdatePlayer(updatedPlayer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlayer", reflect.TypeOf((*MockRepository)(nil).UpdatePlayer), updatedPlayer)
}
